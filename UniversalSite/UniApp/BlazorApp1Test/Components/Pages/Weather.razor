@page "/weather"
@using System.Net
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Web

@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Weather</PageTitle>

<div>
<a>Место <input type="text" @bind="place"/> Или введите координаты:</a>
<br />
<a>Широта <input type="number" @bind="lat" /></a>
<a>Долгота <input type="number" @bind="lon"/></a>
<button class="btn btn-primary" @onclick="SearchPlace"> Поиск </button>

@if (ex != "")
{
<p><em><h5>@ex</h5></em></p>
}
else if (root == null)
{
    <p><em>Ожидание...</em></p>
}
else
{
    <table class="table" style="border-collapse:collapse;">
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Страна</td>
            @if (root.geo_object.country != null)
            {
                <td>@root.geo_object.country.name</td>
            }
            <td></td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Провинция</td>
            @if (root.geo_object.province != null)
            {
                <td>@root.geo_object.province.name</td>
            }
            <td></td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Время суток</td>
            @{dictDaytime.TryGetValue(root.fact.daytime, out string daytime);}
            <td>@daytime</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Время года</td>
            @{
                dictSeason.TryGetValue(root.fact.season, out string season);}
            <td>@season</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Температура</td>
            <td>@root.fact.temp °C</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Ощущается как</td>
            <td>@root.fact.feels_like °C</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Температура воды</td>
            <td>@root.fact.temp_water °C</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Погода</td>
            @{
                dictCondition.TryGetValue(root.fact.condition, out string condition);
            }
            <td>@condition</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Облачность</td>
            @{dictCloudness.TryGetValue(root.fact.cloudness, out string cloudness);}
            <td>@cloudness</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Скорость ветра</td>
            <td>@root.fact.wind_speed м/с</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Направление ветра</td>
            @{
                dictWind.TryGetValue(root.fact.wind_dir, out string wind);
            }
            <td>@wind</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Давление</td>
            <td>@root.fact.pressure_mm мм рт. ст.</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Влажность воздуха</td>
            <td>@root.fact.humidity %</td>
        </tr>
        <tr style="border-bottom:1pt solid">
            <td style="font-weight:bold;">Гроза</td>
            @{
                dictThunder.TryGetValue(root.fact.is_thunder, out string thunder);}
            <td>@thunder</td>
        </tr>
        <tr>
            <td style="font-weight:bold;">Тип осадков</td>
            @{dictPrec.TryGetValue(root.fact.prec_type, out string prec);}
            <td>@prec</td>
        </tr>
    </table>
}
</div>

@code {
    private Root? root;
    private string line;
    private string lat;
    private string lon;
    private string ex = "";
    private string place;
    static HttpClient client = new HttpClient();

    Dictionary<string, string> dictCondition = new Dictionary<string, string>() 
    { 
        {"clear","ясно" },
        {"partly-cloudy","малооблачно" },
        {"cloudy","облачно с прояснениями" },
        {"overcast","пасмурно" },
        {"light-rain","небольшой дождь" },
        {"rain","дождь" },
        {"heavy-rain","сильный дождь" },
        {"showers","ливень" },
        {"wet-snow","дождь со снегом" },
        {"light-snow","небольшой снег" },
        {"snow","снег" },
        {"snow-showers","снегопад" },
        {"hail","град" },
        {"thunderstorm","гроза" },
        {"thunderstorm-with-rain","дождь с грозой" },
        {"thunderstorm-with-hail","гроза с градом" }
    };
    Dictionary<string, string> dictWind = new Dictionary<string, string>()
    {
        {"nw", "северо-западное"},
        {"n", "северное"},
        {"ne", "северо-восточное"},
        {"e", "восточное"},
        {"se", "юго-восточное"},
        {"s", "южное"},
        {"sw", "юго-западное"},
        {"w", "западное"},
        {"c", "штиль"}
    };
    Dictionary<string, string> dictDaytime = new Dictionary<string, string>()
    {
        {"d","день"},
        {"n","ночь"}
    };
    Dictionary<string, string> dictSeason = new Dictionary<string, string>()
    {
        {"summer","лето"},
        {"autumn","осень"},
        {"winter","зима"},
        {"spring","весна"}
    };
    Dictionary<bool, string> dictThunder = new Dictionary<bool, string>()
    {
        {true,"гроза"},
        {false,"нет грозы"}
    };
    Dictionary<int, string> dictPrec = new Dictionary<int, string>()
    {
        {0, "без осадков"},
        {1, "дождь"},
        {2, "дождь со снегом"},
        {3, "снег"},
        {4, "град"}
    };
    Dictionary<double, string> dictCloudness = new Dictionary<double, string>()
    {
        {0,"ясно"},
        {0.25,"малооблачно"},
        {0.5,"облачно с прояснениями"},
        {0.75,"облачно с прояснениями"},
        {1,"пасмурно"}
    };

    public void Search()
    {
        if (lat != null && lon != null)
        {
            root = null;

            WebRequest request = WebRequest.Create($"https://api.weather.yandex.ru/v2/fact?lat=52.37125&lon=4.89388");
            request.Headers.Add("X-Yandex-API-Key: 6288194e-b80a-48fa-9938-03f2c2bf7587");
            WebResponse response = request.GetResponse();
            using (Stream stream = response.GetResponseStream())
            {
                using (StreamReader reader = new StreamReader(stream))
                {
                    line = reader.ReadToEnd();


                    root = JsonSerializer.Deserialize<Root>(line);
                }
            }
        }
    }

    public async Task SearchPlace()
    {
        if (place != "")
        {
            HttpClient httpClient = ClientFactory.CreateClient();
            var response = await httpClient.GetAsync($"{NavigationManager.BaseUri}weathercoord?place={place}");
            string getPlace = await response.Content.ReadAsStringAsync();
            if (getPlace != "не найдено")
            {
                lat = getPlace.Split()[1];
                lon = getPlace.Split()[0];
                ex = "";
                Search();
            }
            else
            {
                lat = "";
                lon = "";
                ex = getPlace;
            }
        }
        else
        {
            Search();
        }
    }

    public class Country
    {
        public int id { get; set; }
        public string name { get; set; } = "";
    }

    public class Fact
    {
        public int obs_time { get; set; }
        public int uptime { get; set; }
        public int temp { get; set; }
        public int feels_like { get; set; }
        public int temp_water { get; set; }
        public string icon { get; set; }
        public string condition { get; set; }
        public double cloudness { get; set; }
        public int prec_type { get; set; }
        public int prec_prob { get; set; }
        public double prec_strength { get; set; }
        public bool is_thunder { get; set; }
        public double wind_speed { get; set; }
        public string wind_dir { get; set; }
        public int pressure_mm { get; set; }
        public int pressure_pa { get; set; }
        public int humidity { get; set; }
        public string daytime { get; set; }
        public bool polar { get; set; }
        public string season { get; set; }
        public string source { get; set; }
        public double soil_moisture { get; set; }
        public int soil_temp { get; set; }
        public int uv_index { get; set; }
        public double wind_gust { get; set; }
    }

    public class GeoObject
    {
        public object district { get; set; }
        public object locality { get; set; }
        public Province province { get; set; }
        public Country country { get; set; }
    }

    public class Info
    {
        public bool n { get; set; }
        public int geoid { get; set; }
        public string url { get; set; }
        public double lat { get; set; }
        public double lon { get; set; }
        public Tzinfo tzinfo { get; set; }
        public int def_pressure_mm { get; set; }
        public int def_pressure_pa { get; set; }
        public string slug { get; set; }
        public int zoom { get; set; }
        public bool nr { get; set; }
        public bool ns { get; set; }
        public bool nsr { get; set; }
        public bool p { get; set; }
        public bool f { get; set; }
        public bool _h { get; set; }
    }

    public class Province
    {
        public int id { get; set; }
        public string name { get; set; } = "";
    }

    public class Root
    {
        public int now { get; set; }
        public DateTime now_dt { get; set; }
        public Info info { get; set; }
        public GeoObject geo_object { get; set; }
        public Fact fact { get; set; }
    }

    public class Tzinfo
    {
        public string name { get; set; }
        public string abbr { get; set; }
        public bool dst { get; set; }
        public int offset { get; set; }
    }

}
